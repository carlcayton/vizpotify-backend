name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-ecr-repository
  ECS_CLUSTER: my-ecs-cluster
  ECS_SERVICE: my-ecs-service

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build with Maven
        env:
          SPRING_PROFILES_ACTIVE: test
          FRONTEND_URL: http://localhost:3000
        run: mvn clean package

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Run unit tests
        env:
          SPRING_PROFILES_ACTIVE: test
          FRONTEND_URL: http://localhost:3000
        run: mvn test
      - name: Run integration tests
        env:
          SPRING_PROFILES_ACTIVE: test
          FRONTEND_URL: http://localhost:3000
        run: mvn verify -P integration-tests

#  sonarqube:
#    runs-on: ubuntu-latest
#    needs: test
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up JDK 17
#        uses: actions/setup-java@v2
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#      - name: SonarQube Scan
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: mvn sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=your-org-key -Dsonar.projectKey=your-project-key

#  build-and-push-image:
#    runs-on: ubuntu-latest
#    needs: sonarqube
#    steps:
#      - uses: actions/checkout@v2
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#      - name: Build and push Docker image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          mvn compile jib:build -Dimage=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#
#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-and-push-image
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#      - name: Deploy to Amazon ECS
#        run: |
#          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment