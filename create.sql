create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, time_range varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6), updated_at timestamp(6), country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigserial not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create sequence public.user_track_feature_stats_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, created_at varchar(255) not null, time_range varchar(255) not null, updated_at varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id), constraint UKkpwjljqi584dfm6l1j3qk8fhd unique (user_spotify_id, time_range));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigint not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id), constraint UKeswiq52vdni6umvuslegas63t unique (user_spotify_id, time_range));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create sequence public.user_track_feature_stats_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, created_at varchar(255) not null, time_range varchar(255) not null, updated_at varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id), constraint UKkpwjljqi584dfm6l1j3qk8fhd unique (user_spotify_id, time_range));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigint not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id), constraint UKeswiq52vdni6umvuslegas63t unique (user_spotify_id, time_range));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
create sequence public.user_artist_track_count_id_seq start with 1 increment by 1;
create sequence public.user_genre_distribution_id_seq start with 1 increment by 1;
create sequence public.user_music_era_summary_id_seq start with 1 increment by 1;
create sequence public.user_track_feature_stats_id_seq start with 1 increment by 1;
create table public.artist_detail (followers_total integer, popularity integer, external_url varchar(255), id varchar(255) not null, image_url varchar(255), name varchar(255), primary key (id));
create table public.artist_genre (artist_id varchar(255) not null, genre varchar(255));
create table public.audio_feature (acousticness float(53) not null, danceability float(53) not null, energy float(53) not null, instrumentalness float(53) not null, liveness float(53) not null, speechiness float(53) not null, tempo float(53) not null, valence float(53) not null, id varchar(255) not null, primary key (id));
create table public.comment (like_count integer not null, comment_id bigserial not null, created_at timestamp(6) not null, author_spotify_id varchar(255) not null, content TEXT not null, dashboard_spotify_id varchar(255) not null, user_name varchar(255) not null, primary key (comment_id));
create table public.spotify_auth_token (expires_in integer not null, last_updated timestamp(6), access_token varchar(255) not null, refresh_token varchar(255) not null, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.track_detail (duration integer not null, popularity integer not null, release_date timestamp(6), album_image_url varchar(255), album_name varchar(255), artists varchar(255), id varchar(255) not null, name varchar(255), primary key (id));
create table public.user_artist_track_count (track_count integer not null, id bigint not null, artist_name varchar(255) not null, created_at varchar(255) not null, time_range varchar(255) not null, updated_at varchar(255) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_detail (analytics_available boolean, followers_total integer, is_display_name_public boolean default true not null, is_profile_public boolean default true not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, country varchar(255), display_name varchar(255), email varchar(255), external_spotify_url varchar(255), followers_href varchar(255), product varchar(255), profile_href varchar(255), profile_picture_url varchar(255), profile_type varchar(255), profile_uri varchar(255), spotify_id varchar(255) not null, primary key (spotify_id));
create table public.user_genre_distribution (genre_count integer not null, percentage float4 not null, id bigint not null, time_range varchar(50) not null, genre varchar(100) not null, user_spotify_id varchar(255) not null, primary key (id), constraint UKkpwjljqi584dfm6l1j3qk8fhd unique (user_spotify_id, time_range));
create table public.user_header_stat (followed_artist_count integer, follower_count integer, playlist_count integer, user_spotify_id varchar(255) not null, primary key (user_spotify_id));
create table public.user_music_era_summary (percentage float4 not null, track_count integer not null, id bigint not null, release_date_range varchar(50) not null, time_range varchar(50) not null, user_spotify_id varchar(255) not null, primary key (id));
create table public.user_top_artist (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, artist_id varchar(255), time_range varchar(255) not null, user_spotify_id varchar(255), primary key (id));
create table public.user_top_track (rank integer not null, id bigserial not null, last_updated timestamp(6) not null, time_range varchar(255) not null, track_id varchar(255), user_spotify_id varchar(255), primary key (id));
create table public.user_track_feature_stats (acousticness float(53), danceability float(53), energy float(53), instrumentalness float(53), liveness float(53), speechiness float(53), tempo float(53), valence float(53), id bigint not null, time_range varchar(255), user_spotify_id varchar(255), primary key (id), constraint UKeswiq52vdni6umvuslegas63t unique (user_spotify_id, time_range));
alter table if exists public.artist_genre add constraint FKehhi674hncssi9wju0fmpl0on foreign key (artist_id) references public.artist_detail;
